######################################################
#             2D Heat Conduction Solver              #
#              Created by J. Mark Epps               #
#          Part of Masters Thesis at UW 2018-2020    #
######################################################

############### INPUT FILE #########################
#    Reference directions:
#    left-smallest x coordinate
#    right-largest x value
#    north-largest y coordinate
#    south-smallest y coordinate

######################################################
#			Settings
#	Rectangular domain
#	Properties are in standard units J, kg, K, W, m
######################################################

Length:0.001
Width:0.006
Nodes_x:101
Nodes_y:601
k:70
Cp:550
rho:6000

######################################################
#			Source terms
#	Source_uniform: specify volumetric heating in W/m^3 or None
#	Source_Kim: True or None
######################################################

Source_Uniform:None
Source_Kim:True
Ea:48000
A0:4890000
dH:63000000000

#Ea=40000 # [J/mol] Approx value from Kim's paper
#        A0=1e8 # [1/s] Fudged value
#        dH=1200 # [J/mol] Value taken from V. Baijot et al., A multi-phase ..., Combustion and Flame, 2017.
#        dH=30000 #[J/kg] approx from ...

######################################################
#			Meshing details
#	Currently not available
#Biasing options:
#    -'OneWayUp'   for linearly increasing element sizes with increasing x/y
#    -'OneWayDown' for linearly decreasing element sizes with increasing x/y
#    -'TwoWayEnd'  for linearly increasing sizes till middle, then decrease again
#    -'TwoWayMid'  for linearly decreasing sizes till middle, then increase again
#    -size         is the smallest element size based on above selection
######################################################

bias_type_x:None
bias_size_x:0.003
bias_type_y:None
bias_size_y:1e-06

######################################################
#			Time advancement details
#	'Fo' (in (0, 1.0)) OR 'dt' must be specified; if both are, then smallest will be used; Fo stability check to 1.0
#	'total_time_steps' OR 'total_time' must be specified; if both, then smallest will be used
#	Time schemes: Explicit, Implicit
#	'Convergence' and 'Max_iterations' are for implicit solver
#	[IN PROGRESS] Number_Data_Output: Number of T variable files to be output over the time/number of steps specified
######################################################

Fo:0.2
dt:None
total_time_steps:6000
total_time:None
Time_Scheme:Explicit

Convergence:0.0001
Max_iterations:100

Output_directory:C:\Users\mepps\Documents\Research\2D_Conduction\Tests\Tign\1
#Output_directory:C:\Users\Joseph\Documents\School\Research\2D_Conduction\Tests\Nanothermite\2
Number_Data_Output:6

######################################################
#			Boundary conditions
# Format: [type of BC], [values for BC], [first node #], [last node #]
#	[type of BC]  -T or F for const. temp or flux; each requires one value for [values for BC]
#	[type of BC]  -C for convective BC; requires conv. HT coeff AND T_infty for [values for BC]
#	[first node #]-first node number to apply BC; 0 based index; must be positive
#	[last node #] -last node number to apply BC; must be negative/relative to last node; node-Nodes_x
#		Mulitple BCs can be specified along a boundary; separate everything with commas;
#	e.g. F, 1000, 0,-10,C,10,300,10,-1
#  [IN PROGRESS] Profiles possible; must be same size as number of nodes on that boundary
# [IN PROGRESS] Radiation options: None or [emissivity, surrounding_Temp]
######################################################

bc_left:F, 0, 0, -1
bc_left_rad:None
bc_right:C, 30, 300, 0, -1
bc_right_rad:None
# numpy.linspace(400, 900, settings['Nodes_y'])
bc_south:F, 0, 0, -1
bc_south_rad:None
bc_north:F, 400000000, 0, -81,C, 30, 300, 20, -1
bc_north_rad:None
# numpy.linspace(400, 900, settings['Nodes_x'])
